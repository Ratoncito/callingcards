/*
========================================================================================
    nf-core/callingcards Nextflow config file
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    input                      = null
    organism                   = null
    require_exact_length       = 'false'
    reduce_to_se               = false
    r1_crop                    = false
    r1_crop_length             = 88
    promoter_bed               = null
    pileup_stranded            = null
    background_ccf             = null
    chr_map                    = null
    standard_chr_format        = 'refseq'
    sqlite_db_out              = ':memory:'
    poisson_pseudocount        = 0.2
    save_reference             = false
    save_intermediate          = false

    // UMI
    r1_bc_pattern              = null
    r2_bc_pattern              = null

    // Aligner
    aligner                    = 'bwamem2'
    bwamem2_index              = null

    // Add_reag_group_and_tags
    barcode_length             = null
    insertion_length           = 1

    // Count Hops
    min_mapq                   = 10

    // TODO parameterize these in the count_hops script and pass here
    // mpileup_excl_flags         = 'UNMAP,SECONDARY,QCFAIL'
    // mpileup_output_extra       = 'QNAME,FLAG,MAPQ,RG,XI,XZ'

    // References
    genome                     = null
    fasta                      = null
    fasta_index                = null
    igenomes_base              = 's3://ngi-igenomes/igenomes'
    igenomes_ignore            = false


    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    max_multiqc_email_size     = '25.MB'

    // Boilerplate options
    outdir                     = './results'
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    help                       = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes'
    enable_conda               = false

    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    test_yeast { includeConfig 'conf/test_yeast.config'     }
    test_human { includeConfig 'conf/test_human.config'     }
    test_slurm { includeConfig 'conf/test_slurm.config'     }
    test_sge   { includeConfig 'conf/test_sge.config'       }
    test_lsf   { includeConfig 'conf/test_lsf.config'       }
    test_full  { includeConfig 'conf/test_full.config'      }
    yeast      { includeConfig 'conf/default_yeast.config'  }
    mammal     { includeConfig 'conf/default_mammal.config' }
    htcf {

        params {

            config_profile_description = 'Washington University, St Louis Center for Genome Sciences HTCF profile.'
            config_profile_contact = 'Chase Mateusiak (chasem@wustl.edu)'
            config_profile_url = "https://htcf.wustl.edu/docs/"

            // Max resource options
            // Defaults only, expecting to be overwritten
            max_memory                 = '128.GB'
            max_cpus                   = 24
            max_time                   = '240.h'

        }

        executor {

            submitRateLimit = "2 sec"

        }

        process {

            executor = "slurm"
            scratch = true
            scratch = "${launchDir}/local_tmp"

            withLabel:process_medium {
                cpus = { check_max( 6 * task.attempt, 'cpus' ) }
                memory = { check_max( 29.GB * task.attempt, 'memory' ) }
                time = { check_max( 8.h * task.attempt, 'time' ) }
            }

            withLabel:process_high {
                cpus = { check_max(8 * task.attempt, 'cpus' ) }
                memory = { check_max( 59.GB * task.attempt, 'memory' ) }
                time = { check_max( 8.h * task.attempt, 'time' ) }
            }

        }


    } // end htcf
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
    name            = 'nf-core/callingcards'
    author          = 'Chase Mateusiak'
    homePage        = 'https://github.com/nf-core/callingcards'
    description     = 'A bioinformatics analysis pipeline for processing Transposon Calling Cards sequencing data'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '0.0.0'
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
