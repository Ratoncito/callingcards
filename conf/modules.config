/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/


process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:PREPARE_GENOME:.*' {
        publishDir = [
            enabled: params.save_reference,
            path: { "${params.outdir}/reference" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = '--quiet'
    }

    withName: MULTIQC {
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // add barcode patterns to
    withName: UMITOOLS_EXTRACT {
        publishDir = [
            enabled: params.save_intermediate,
            path: { "${params.outdir}/${meta.id}/processed_reads/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        // if the r2 pattern is empty, only add the r1 barcode
        ext.prefix = { "${meta.id}_barcoded" }
        ext.args = [
            "--bc-pattern=${params.r1_bc_pattern}",
            params.r2_bc_pattern ? "--bc-pattern2=${params.r2_bc_pattern}" : ""
        ].join(' ').trim()
    }

    // add barcode patterns to
    withName: TRIMMOMATIC {
        publishDir = [
            enabled: params.save_intermediate,
            path: { "${params.outdir}/${meta.id}/processed_reads/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        // if the r2 pattern is empty, only add the r1 barcode
        ext.prefix = { "${meta.id}_barcoded_cropped" }
        ext.args = [
            "CROP:${params.r1_crop_length}"
        ].join(' ').trim()
    }

    // Do not output bams without read group and tags
    // todo: consider making this a user selection
    withName: BWAMEM2_INDEX {
        publishDir = [
            enabled: params.save_reference,
            path: { "${params.outdir}/reference" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Do not output bams without read group and tags
    // todo: consider making this a user selection
    withName: BWAMEM2_MEM {
        publishDir = [
            enabled: params.save_intermediate,
            path: { "${params.outdir}/${meta.id}/alignment/unsorted" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // NOTE: do not output these bam files -- they are not yet tagged. the tagged,
    //       indexed bamfiles are output by ADD_RG_AND_TAGS
    withName: '.*SAMTOOLS_SORT_INDEX_STATS:SAMTOOLS_SORT' {
        publishDir =  [
                enabled: false,
                path: { "${params.outdir}/${meta.id}/alignment/qc/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        ext.prefix = { "${meta.id}_sorted" }
    }
    withName: '.*SAMTOOLS_SORT_INDEX_STATS:SAMTOOLS_INDEX' {
        publishDir =  [
                enabled: false,
                path: { "${params.outdir}/${meta.id}/alignment/qc/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        ext.prefix = { "${meta.id}_sorted" }
    }

    withName: '.*SAMTOOLS_SORT_INDEX_STATS:SAMTOOLS_BAM_STATS:.*'{
        publishDir = [
                path: { "${params.outdir}/${meta.id}/alignment/qc/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
    }

    withName: ADD_RG_AND_TAGS {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/alignment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PICARD_COLLECTMULTIPLEMETRICS{
        publishDir = [
            path: { "${params.outdir}/${meta.id}/alignment/qc/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PRESEQ_LCEXTRAP{
        publishDir = [
            path: { "${params.outdir}/${meta.id}/alignment/qc/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PRESEQ_CCURVE{
        publishDir = [
            path: { "${params.outdir}/${meta.id}/alignment/qc/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: COUNT_HOPS {

        publishDir = [
            path: { "${params.outdir}/${meta.id}/quantification/raw" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BARCODE_QC_DEMULTIPLEX {

        publishDir = [
            [
                path: { "${params.outdir}/${meta.id}/quantification/${meta.status}/qbed" },
                mode: params.publish_dir_mode,
                pattern: "*.qbed"
            ],
            [
                path: { "${params.outdir}/${meta.id}/quantification/${meta.status}/qc" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv"
            ]
        ]
    }

    withName: YEAST_FIND_SIG_PROMOTERS {

        publishDir = [
            path: { "${params.outdir}/${meta.sample_id}/quantification/${meta.status}/significance" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
